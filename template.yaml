AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
    Tracing: Active
    Architectures:
      - arm64

Parameters:
  CorsOrigin:
    Type: String
    Default: "'*'"
    Description: (Optional) Cross-origin resource sharing (CORS) Origin. You can specify a single origin, all "*" or leave empty and no CORS will be applied.
    MaxLength: 250
  SSMStripeSecretKey:
    Type: String
    Default: 'lambda-stripe-charge/stripe-secret-key'
    Description: >
      This component assumes the Stripe Secret key needed to use the Stripe Charge API is stored as SecureStrings in SSM Parameter Store under the path defined by
      this parameter. See the component README for details.
    AllowedPattern: ^[0-9a-zA-Z-][0-9a-zA-Z-\/]+
    ConstraintDescription: 'Exclude the starting slash'
  SSMStripeEndpointSecret:
    Type: String
    Default: 'lambda-stripe-charge/stripe-endpoint-secret'
    Description: >
      This component assumes the Stripe Endpoint Secret used to validate if the incoming webhook requests are really coming from Stripe
    AllowedPattern: ^[0-9a-zA-Z-][0-9a-zA-Z-\/]+
    ConstraintDescription: 'Exclude the starting slash'
  EnableInstantCapture:
    Type: String
    AllowedValues: [true, false]
    Default: true
    Description: To immediatelly capture a payment upon charge, if true it means on charge you collect the amount, if false, you need to do a capture.
  Environment:
    Default: dev
    Type: String
Conditions:
  ShouldEnableCapture: !Equals [true, !Ref EnableInstantCapture]
Resources:
  StripeApiWebhook:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Ref CorsOrigin
        MaxAge: "'3600'"
        AllowMethods: "'OPTIONS,POST'"
      StageName: !Ref Environment
      TracingEnabled: true
      Description: Webhooks for Stripe callbacks on checkout
  ProcessStripeEvent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: stripe.handler
      Policies:
        - SNSCrudPolicy:
            TopicName: !GetAtt SNSTopic.TopicName
        - SSMParameterReadPolicy:
            ParameterName: !Ref SSMStripeSecretKey
        - SSMParameterReadPolicy:
            ParameterName: !Ref SSMStripeEndpointSecret
      Environment:
        Variables:
          IS_CORS: IsCorsDefined
          CORS_ORIGIN: !Ref CorsOrigin
          SSM_STRIPE_SECRET_KEY: !Ref SSMStripeSecretKey
          SSM_STRIPE_ENDPOINT_SECRET: !Ref SSMStripeEndpointSecret
          TOPIC_ARN: !Ref SNSTopic
      Events:
        Api:
          Type: Api
          Properties:
            Path: /stripe
            Method: POST
            RestApiId: !Ref StripeApiWebhook
  SNSTopic:
    Type: AWS::SNS::Topic
Outputs:
  ChargeApiUrl:
    Value: !Sub https://${StripeApiWebhook}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/charge
    Description: The URL of the API Gateway you provide to Stripe as a webhook it invokes to CREATE a charge based on its token.
  CaptureApiUrl:
    Value: !Sub https://${StripeApiWebhook}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/capture
    Description: The URL of the API Gateway you provide to Stripe as a webhook it invokes to CAPTURE a charge based on its token.
  RefundApiUrl:
    Value: !Sub https://${StripeApiWebhook}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/refund
    Description: The URL of the API Gateway you provide to Stripe as a webhook it invokes to CAPTURE a charge based on its token.
  SNSTopic:
    Value: !Ref SNSTopic
    Description: The SNS topic your Stripe Lambda is notifying to
